<?php
// $Id: devel_demo.module,v 1.1.2.1 2011/02/06 11:08:49 wulff Exp $

/**
 * @file
 * A demonstration of some of the tools from the Devel module.
 *
 * Copyright 2009 Morten Wulff <wulff@ratatosk.net>
 */

/* --- HOOKS ---------------------------------------------------------------- */

/**
 * Implementation of hook_menu().
 */
function devel_demo_menu() {
  $items = array();

  $items['devel_demo'] = array(
    'title' => 'Devel Demo',
    'page callback' => 'devel_demo_page',
    'access callback' => TRUE,
  );

  $items['devel_demo/dpm'] = array(
    'title' => 'dpm()',
    'page callback' => 'devel_demo_page_dpm',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/dvm'] = array(
    'title' => 'dvm()',
    'page callback' => 'devel_demo_page_dvm',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/dpr'] = array(
    'title' => 'dpr()',
    'page callback' => 'devel_demo_page_dpr',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/dvr'] = array(
    'title' => 'dvr()',
    'page callback' => 'devel_demo_page_dvr',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/kpr'] = array(
    'title' => 'kpr()',
    'page callback' => 'devel_demo_page_kpr',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['devel_demo/dfb'] = array(
    'title' => 'dfb()',
    'page callback' => 'devel_demo_page_dfb',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/dfb_severity'] = array(
    'title' => 'dfb()',
    'page callback' => 'devel_demo_page_dfb_severity',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['devel_demo/dargs'] = array(
    'title' => 'dargs()',
    'page callback' => 'devel_demo_page_dargs',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/dd'] = array(
    'title' => 'dd()',
    'page callback' => 'devel_demo_page_dd',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/ddebug_backtrace'] = array(
    'title' => 'ddebug_backtrace()',
    'page callback' => 'devel_demo_page_ddebug_backtrace',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['devel_demo/db_queryd'] = array(
    'title' => 'db_queryd()',
    'page callback' => 'devel_demo_page_db_queryd',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/* --- HOOKS ---------------------------------------------------------------- */

function devel_demo_page() {
  $output = '<p>'. t('Click the links below to see demonstrations of the various helper functions provided by the Devel module.') .'</p>';

  $basic_demos = array(
    l('dpm()', 'devel_demo/dpm'),
    l('dvm()', 'devel_demo/dvm'),
    l('dpr()', 'devel_demo/dpr'),
    l('dvr()', 'devel_demo/dvr'),
    l('kpr()', 'devel_demo/kpr'),
  );
  $content = theme('item_list', $basic_demos);
  $output .= theme('box', t('Basic'), $content);

  $advanced_demos = array(
    l('dargs()', 'devel_demo/dargs/foo/42'),
    l('dd()', 'devel_demo/dd'),
    l('ddebug_backtrace()', 'devel_demo/ddebug_backtrace'),
    l('db_queryd()', 'devel_demo/db_queryd'),
  );
  $content = theme('item_list', $advanced_demos);
  $output .= theme('box', t('Advanced'), $content);

  if (function_exists('fb')) {
    $firephp_demos = array(
      l('dfb()', 'devel_demo/dfb'),
      l('dfb()', 'devel_demo/dfb_severity') .' '. t('using various severity levels'),
    );
    $content = '<p>'. t('Open the Firebug console before clicking these links. See the !firephp-url for more information on how to use FirePHP.', array('!firephp-url' => l('FirePHP documentation', 'http://www.firephp.org/HQ/Use.htm'))) .'</p>';
    $content .= theme('item_list', $firephp_demos);
  }
  else {
    $content = '<p>'. t('You must install the FirePHP library and Firefox extension to see these demos. Download the latest version from !firephp-url and install it according to the instructions in the Devel module README file.', array('!firephp-url' => l('www.firephp.org', 'http://www.firephp.org/'))) .'</p>';
  }
  $output .= theme('box', t('FirePHP'), $content);

  return $output;
}

function devel_demo_page_dpm() {
  $output = '';

  dpm(_devel_demo_example());

  $output .= '<p>'. t("Prints a variable to the 'message' area of the page. Uses drupal_set_message().") .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dpm($input, $name = NULL)</code></p>';

  return $output;
}

function devel_demo_page_dvm() {
  $output = '';

  dvm(_devel_demo_example());

  $output .= '<p>'. t("Uses var_dump() to print a variable to the 'message' area of the page. Uses drupal_set_message().") .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dvm($input, $name = NULL)</code></p>';

  return $output;
}

function devel_demo_page_dpr() {
  $output = '';

  dpr(_devel_demo_example(), FALSE, 'Optional name');

  $output .= '<p>'. t('Pretty-prints a variable to the browser (no krumo).') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dpr($input, $return = FALSE, $name = NULL)</code>. Set the second parameter to TRUE if you want to return a string instead of printing it.</p>';

  return $output;
}

function devel_demo_page_dvr() {
  $output = '';

  dvr(_devel_demo_example());

  $output .= '<p>'. t('Uses var_dump() to pretty-print a variable to the browser (no krumo).') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dvr($input, $return = FALSE, $name = NULL)</code>. Set the second parameter to TRUE if you want to return a string instead of printing it.</p>';

  return $output;
}

function devel_demo_page_kpr() {
  $output = '';

  kpr(_devel_demo_example());

  $output .= '<p>'. t('Pretty-prints a variable to the browser using krumo.') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>kpr($input, $return = FALSE, $name = NULL)</code>. Set the second parameter to TRUE if you want to return a string instead of printing it.</p>';

  return $output;
}

function devel_demo_page_dfb() {
  $output = '';

  dfb('This message is being logged to the Firebug console.', 'Devel Demo');
  dfb(array('foo' => 1, 'bar' => 2), 'Devel Demo');

  $output .= '<p>'. t('This function is a wrapper around the FirePHP fb() function.') .'</p>';
  $output .= '<p>'. t('You should now see a message and a variable dump in the Firebug console (make sure that both the <em>Console</em> and <em>Net</em> panels are enabled).') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dfb($input, $label = NULL)</p>';
  $output .= '<p>'. t('This example is rendered using the following code:') .'</p>';
  $output .= <<<CODE
    <blockquote>
      <code>
        dfb('This message is being logged to the Firebug console.', 'Devel Demo');<br />
        dfb(array('foo' => 1, 'bar' => 2), 'Devel Demo');
      </code>
    </blockquote>
CODE;

  return $output;
}

function devel_demo_page_dfb_severity() {
  $output = '';

  dfb('A log message using the LOG severity level.', 'Devel Demo', FirePHP::LOG);
  dfb('A log message using the INFO severity level.', 'Devel Demo', FirePHP::INFO);
  dfb('A log message using the WARN severity level.', 'Devel Demo', FirePHP::WARN);
  dfb('A log message using the ERROR severity level.', 'Devel Demo', FirePHP::ERROR);

  $output .= '<p>'. t('You should now see four message in the Firebug console (make sure that both the <em>Console</em> and <em>Net</em> panels are enabled).') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dfb($input, $label = NULL, $severity = FirePHP::LOG)</p>';
  $output .= '<p>'. t('This example is rendered using the following code:') .'</p>';
  $output .= <<<CODE
    <blockquote>
      <code>
        dfb('A log message using the LOG severity level.', 'Devel Demo', FirePHP::LOG);<br />
        dfb('A log message using the INFO severity level.', 'Devel Demo', FirePHP::INFO);<br />
        dfb('A log message using the WARN severity level.', 'Devel Demo', FirePHP::WARN);<br />
        dfb('A log message using the ERROR severity level.', 'Devel Demo', FirePHP::ERROR);
      </code>
    </blockquote>
CODE;

  return $output;
}

function devel_demo_page_dargs() {
  $output = '';
  dargs();

  $output .= '<p>'. t("Prints the arguments passed into the current function. In this case, the arguments are 'foo', and '42'.") .'</p>';

  return $output;
}

function devel_demo_page_dd() {
  $output = '';

  $tmp_dir = variable_get('file_directory_temp', '/tmp');

  dd(_devel_demo_example(), 'Devel Demo');

  $output .= '<p>'. t("Logs any variable to a file in the site's temp directory.") .'</p>';
  $output .= '<p>'. t('Debug information has been appended to %debug.', array('%debug' => $tmp_dir .'/drupal_debug.txt')) .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>dd($data, $label = NULL)</p>';

  return $output;
}

function devel_demo_page_ddebug_backtrace() {
  $output = '';
  ddebug_backtrace();

  $output .= '<p>'. t('Prints the function call stack.') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>ddebug_backtrace()</p>';

  return $output;
}

function devel_demo_page_db_queryd() {
  $output = '';

  $result = db_queryd('SELECT * FROM {users} WHERE uid = 1');
  $result = db_queryd('SELECT * FROM WHERE uid = 1');

  $output .= '<p>'. t('Debugging version of db_query() which prints the query and any error messages to the browser.') .'</p>';
  $output .= '<p>'. t('Syntax') .': <code>db_queryd($query)</p>';

  return $output;
}

/* --- UTILITY -------------------------------------------------------------- */

/**
 * Create an array of data from a couple of global variables to demonstrate
 * the various debugging functions.
 */
function _devel_demo_example() {
  global $conf, $language, $user;

  return array(
    'conf' => $conf,
    'language' => $language,
    'user' => $user,
  );
}
